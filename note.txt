CODICE
- sistemare codice 
- sistemare problema camera
- aggiungere codice posizione ISS
- aggiungere codie che riconosce giorno- notte
- aggiungere codice per immagini + posizione


POST ESPERIMENTO 
- confronto con immagini
- prepare una lista di immagini per confronto 


ALTRO
3gB a disposizione:
foto = 13Mb
tot fot = 230 ( in realta 2000 ma nella meta del tempo è buio e scarta)
1 foto ogni 24s

DA RIVEDERE
- nel webinar dicono che nuova camera fa immagini molto più grandi tipo 12mB
- non è più necessario ML perche con la nuova libreria ce il metodo is_light che ti dice se è buio o notte 
quindi basta far girare il codice solo di giorno. DOmanda: che cosa facciamo di notte?
- in astro pi ce pre installato digicam che è sofwear che localizza immagine.Dobbiamo seguire guida online e 
fare in modo che imamgini abbiano dentro anche posizione in modo che nel post possiamo analizzare
- i dati e immagini che abbaimo non sono con filtro IR quindi sono praticamente inutili.


#code that makes the photos
from time import sleep
from picamera import PiCamera
from pathlib import Path
import cv2
import numpy as np
from fastiecm import fastiecm

# function to increase the contrast
def contrast(img):
    in_min = np.percentile(img, 5)
    in_max = np.percentile(img, 95)
    out_min = 0.0
    out_max = 255.0
    out = img - in_min
    out *= ((out_min - out_max) / (in_min - in_max))
    out += in_min
    return out

# function to culculate the ndvi index
def calc_ndvi (img):
    #create the variabels for the 3 colors channels: red. green and blue
    b, g, r = cv2.split(img)
    # create bottom as the sum of the red and blue channel 
    bottom = (r.astype(float) + b.astype(float))
    #initialize bottom
    bottom[bottom==0] = 0.01
    # calculate the ndvi index
    ndvi = (b.astype(float) - r) / bottom
    return ndvi

base_folder = Path(__file__).parent.resolve()

camera = PiCamera()
camera.resolution = (1296,972) #qui dobbiamo scegliere la risoluzione delle immagini che vogliamo 
camera.start_preview()
for i in range(1):   #all'interno dell' range dobbiamo scegliere quante foto fare scattare al programma durante le tre ore
    # Camera warm-up time
    sleep(2)
    camera.capture(f"{base_folder}/image{i}s.jpg") 
    # load the original img
    original = cv2.imread(f"imgage{i}.jpg")
    contrasted = contrast(original)
    ndvi = calc_ndvi(contrasted)
    ndvi_contrasted = contrast(ndvi)
    # color map the dark ndvi contrasted img
    color_mapped_prep = ndvi_contrasted.astype(np.uint8)
    color_mapped_image = cv2.applyColorMap(color_mapped_prep, fastiecm)
    cv2.imwrite(f"{base_folder}/imagendvi{i}.jpg", color_mapped_image)
